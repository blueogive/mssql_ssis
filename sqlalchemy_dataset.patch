--- /home/docker/.local/lib/python3.7/site-packages/great_expectations/dataset/sqlalchemy_dataset.py	2020-07-23 20:59:53.000000000 +0000
+++ sqlalchemy_dataset_mn.py	2020-07-23 21:23:07.479522852 +0000
@@ -189,7 +189,8 @@
             count_query = sa.select(
                 [
                     sa.func.count().label("element_count"),
-                    sa.func.sum(sa.case([(ignore_values_condition, 1)], else_=0)).label(
+		    #msn mod for 11.5 through 11.8
+                    sa.func.sum(sa.case([(expected_condition,1)], else_=0)).label(
                         "null_count"
                     ),
                     sa.func.sum(
@@ -1020,10 +1021,19 @@
                     self._table
                 )
             ).fetchall()
-            col_dict = [
-                {"name": col_name, "type": getattr(type_module, col_type.upper())()}
-                for col_name, col_type in col_info
-            ]
+            # fourlines below relaced by the 15 lines following for the INTEGER Error  msn
+            col_dict = None
+            try:
+                col_data = [col for col in col_info if col[1] == "int"]
+                if col_data == None:
+                    col_dict = [{'name': col_name, 'type': getattr(type_module,col_type.upper())()} for col_name,col_type in col_info]
+                else:
+                    col_dict = [{'name':col_name,'type':getattr(type_module,"INTEGER")()} for col_name,col_type in col_info]
+            except IndexError:
+                raise ValueError("Unrecognized column: %s" % column)
+            except KeyError:
+                raise ValueError("No database type data available for column: %s" % column)
+        #end of replace msn
         return col_dict
 
     ###
